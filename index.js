const puppeteer = require('puppeteer');
const fs = require('fs');


(async () => {
  const browser = await puppeteer.launch({ headless: false, protocolTimeout: 0 });
  const page = await browser.newPage();
  await page.goto('https://plgeubet.com/ru');
  await wait(40000);

  page.on('console', (msg) => {
    const text = msg.text();
    
    if (text.startsWith('üòÇ')) {
      const [,row] = text.split('üòÇ')
      console[msg.type()]('', row);
  
      fs.appendFile('bet_statistics.txt', `\n ${row}`, () => {});
    }
  });
  
  //–ó–∞–ø–∏—Å—É—î —Å—Ç–∞–≤–∫—É –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É.
  await page.evaluate(async () => {
    
    const arrValue = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191];
    const sequenceColors = ['red', 'dark', 'red', 'red', 'dark', 'red', 'dark', 'dark',];
    let n = 0;

    for (let cell = 0; true; cell++) {
      let rnum = arrValue[n];
      let color = sequenceColors[cell];
      const randomDelay = Math.round((100 + Math.random() * 1000));

      const input = document.getElementById('roulette_amount');
      if (input) {
        input.value = rnum;
      }
      await wait(randomDelay);

      //–ü—É—à–∏—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ –∫–æ–ª—ñ—Ä.
      document.querySelector(`.${color}_button`).dispatchEvent(new Event('click', { bubbles: true }))

      //–∑–∞—Ç—Ä–∏–º–∫–∞ 35—Å–µ–∫.
      await wait(35000 - randomDelay);

      // –≤–∏—Ç—è–≥—É—î –ø–æ—Ç–æ—á–Ω–µ —á–∏—Å–ª–æ —è–∫–µ –≤–∏–ø–∞–ª–æ.
      const value = Array.from(document.querySelectorAll('.ball'), el => el.innerText).at(-1);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —á–∏—Å–ª–∞ –¥–æ –∫–æ–ª—å–æ—Ä—É —Ä—É–ª–µ—Ç–∫–∏.
      let valueColor = (value < 1) ? 'green' : (value <= 7) ? 'red' : 'dark';

      console.log('üòÇ', value, rnum, valueColor === sequenceColors[cell]);
      
      (valueColor === sequenceColors[cell]) ? n = 0 : n++;
      
      if (cell + 1 === sequenceColors.length) {
        cell = -1;
      }
      
    }

    async function wait(delay) {
      await new Promise((resolve) => {
        setTimeout(resolve, delay)
      })
    }
  });
})();

// –§—É–Ω–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –¥—ñ–π.
async function wait(delay) {

  await new Promise((resolve) => {
    setTimeout(resolve, delay)
  })
}